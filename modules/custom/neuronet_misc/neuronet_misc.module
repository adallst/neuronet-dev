<?php

/**
 * @file
 * Contains neuronet_misc.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use \Drupal\node\Entity\Node;
/**
 * Implements hook_help().
 */
function neuronet_misc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the neuronet_misc module.
    case 'help.page.neuronet_misc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds miscellaneous functionality to the NeuroNet website') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function neuronet_misc_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // Remove old positions
  if($view->id() == 'alumni'){
    $indexes_to_remove = array();
    foreach($view->result as $value){
      // it is VERY annoying to get entity reference values in Drupal 8
      $nid = $value->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
      $start_date = $value->_entity->get('field_start_date')->value;
      $index = 0;
      foreach($view->result as $value2){
        $sub_nid = $value2->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
        if ($nid == $sub_nid) {   
          $start_date = $value->_entity->get('field_start_date')->value;
          $start_date2 = $value2->_entity->get('field_start_date')->value;
          if (date($start_date2) < date($start_date)) {
            $indexes_to_remove[] = $index;
          }
        }
        $index++;
      }
    }
    foreach ($indexes_to_remove as $index){
      unset($view->result[$index]);
    }
  }
}

function neuronet_misc_preprocess_page(&$variables /*, RouteMatchInterface $route_match*/){  
   $variables['#attached']['library'][] = 'neuronet_misc/neuronet_misc';
   $current_path = \Drupal::service('path.current')->getPath();
   $path_args = explode('/', $current_path);

   global $base_url;
   
   // redirect user page to profile
   if ($path_args[1] == 'user' && is_numeric($path_args[2]) && (!isset($path_args[3]) || is_null($path_args[3]))) {
    $user = User::load($path_args[2]);
    if(is_object($user)) {
      $connection = \Drupal::database();
      $query = $connection->query("SELECT field_profile_target_id FROM {user__field_profile} WHERE entity_id = :entity_id", [':entity_id' => $path_args[2]]);
      $result = $query->fetchAll();
      if (!empty($result)) {
        $nid = $result[0]->field_profile_target_id;
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$nid);
        $response = new RedirectResponse($base_url . $alias);
        $response->send();
      }
    }
   } 
   if ((isset($path_args[1]) && isset($path_args[2]) && isset($path_args[3])) && $path_args[1] == 'user' && is_numeric($path_args[2]) && $path_args[3] == 'edit') {
    $user = User::load($path_args[2]);
    $token = \Drupal::request()->query->get('pass-reset-token');
    if(is_object($user) && is_null($token)) {
      $connection = \Drupal::database();
      $query = $connection->query("SELECT field_profile_target_id FROM {user__field_profile} WHERE entity_id = :entity_id", [':entity_id' => $path_args[2]]);
      $result = $query->fetchAll();
      if (!empty($result)) {
        $nid = $result[0]->field_profile_target_id;
        $response = new RedirectResponse($base_url . '/node/' . $nid . '/account');
        $response->send();
      }
    }
   }
   /*$user = User::load(21);
   $link = user_pass_reset_url($user);
   kint($link);*/
}

function neuronet_misc_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $type = $node->type->entity->label();
  //kint($op);
  if ($type == 'Profile' && $op == 'update') {
    $user = User::load($account->id());
    if (!$user->get('field_profile')->isEmpty() && $node->id() == $user->get('field_profile')->target_id) {
      return AccessResult::allowedIf(True);
    }
    if (($user->hasRole('deputy_admin') || $user->hasRole('administrator')) && $node->id() != 1) {
      return AccessResult::allowedIf(True);
    }
  }
  //$type = $node::getType(); 
}

function neuronet_misc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_profile_edit_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['revision_information']['#access'] = False;
      $form['field_email']['#access'] = False; 
    }
  }
  if ($form_id == 'user_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['field_profile']['#access'] = False;
      unset($form['contact']);
      $form['user_picture']['#access'] = False; 
    }
  }
}

/*
 *  Implements hook_mail_alter()
 *    
 *  This function stops all emails from being sent from my development environment
 *  I took it from http://www.jaypan.com/tutorial/preventing-emails-being-sent-drupal-7-development-environment
*/
function neuronet_misc_mail_alter(&$message){
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if (!isset($_SERVER['PANTHEON_ENVIRONMENT']) && !defined('MED_SERVER')) {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
 
    // Next: Log the mail so it can be debugged if necessary
    $notice = 'The following email was not sent: <pre> <br/>Subject: ' .  $message['subject'] . '<br/>' . implode('', $message['body']) . print_r($message, TRUE) . '</pre>';
    \Drupal::logger('neuronet_misc')->notice($notice);
  }
}

function neuronet_misc_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user') {
    $entity_id;
    $user = User::load($entity->id());
    $connection = \Drupal::database();
      $query = $connection->query("SELECT field_profile_target_id FROM {user__field_profile} WHERE entity_id = :entity_id", [':entity_id' => $entity->id()]);
      $result = $query->fetchAll();
    if (!empty($result)) {
      $nid = $result[0]->field_profile_target_id;
      $node = Node::load($nid);
      $new_email = $user->getEmail();
      $node->set('field_email', $new_email);
      $node->save();
      // if email exists: 
        // throw new \Exception(t('Fields are not unique!'));
    }
    
  }
}
