<?php

/**
 * @file
 * Contains neuronet_misc.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Asset\AttachedAssetsInterface;
use \Drupal\node\Entity\Node;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\neuronet_misc\Service\CompletedFields;

/**
 * Implements hook_help().
 */
function neuronet_misc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the neuronet_misc module.
    case 'help.page.neuronet_misc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds miscellaneous functionality to the NeuroNet website') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function neuronet_misc_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // Remove old positions
  if($view->id() == 'alumni'){
    $indexes_to_remove = array();
    foreach($view->result as $value){
      // it is VERY annoying to get entity reference values in Drupal 8
      $nid = $value->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
      $start_date = $value->_entity->get('field_start_date')->value;
      $index = 0;
      foreach($view->result as $value2){
        $sub_nid = $value2->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
        if ($nid == $sub_nid) {
          $start_date = $value->_entity->get('field_start_date')->value;
          $start_date2 = $value2->_entity->get('field_start_date')->value;
          if (date($start_date2) < date($start_date)) {
            $indexes_to_remove[] = $index;
          }
        }
        $index++;
      }
    }
    foreach ($indexes_to_remove as $index){
      unset($view->result[$index]);
    }
  }
  // Respond to Send Custom Email action processing in Current Students view.
  if ($view->id() == 'current_students') {
    $tempstore = \Drupal::service('tempstore.private');
    // Get the store collection.
    $store = $tempstore->get('neuronet_misc');
    $sent_email_data = $store->get('sent_email_data');
    if (!empty($sent_email_data)) {
      $email_sent = $sent_email_data['email_sent'];
      // Get sender profile ID.
      $sender_profile = \Drupal::entityTypeManager()
        ->getStorage('user')
        ->load(\Drupal::currentUser()->id());
      // Create & save email node.
      $email = \Drupal::entityTypeManager()->getStorage('node')->create([
        'type' => 'email',
        'title' => $email_sent['name'] . ' -- ' . time(),
        'field_email_name' => $email_sent['name'],
        'field_subject' => $email_sent['subject'],
        'body' => [
          'value' => $email_sent['email']['value'],
          'format' => 'full_html',
        ],
        'field_sender' => $sender_profile->get('field_profile')->target_id,
        'field_people_emailed' => $sent_email_data['recipient_nids'],
      ]);
      // Set Drupal message for email recipients.
      \Drupal::messenger()->addStatus(t('The "@name" email was sent to: @recipients', [
        '@recipients' => rtrim($sent_email_data['recipient_names'], ', '),
        '@name' => $email_sent['name'],
      ]));
      // Set Drupal message for disabled recipients.
      if (!empty($sent_email_data['disabled_recipient_names'])) {
        \Drupal::messenger()->addStatus(t('The "@name" email was *not* send to the following users
          due to their turning off notifications: @recipients', [
          '@recipients' => rtrim($sent_email_data['disabled_recipient_names'], ', '),
          '@name' => $email_sent['name'],
        ]));
      }
      $email->save();
      $store->delete('sent_email_data');
    }
  }
}

function neuronet_misc_preprocess_page(&$variables /*, RouteMatchInterface $route_match*/){
  $variables['#attached']['library'][] = 'neuronet_misc/neuronet_misc';
}

function neuronet_misc_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($node->getType() == 'profile' && $op == 'update') {
    $user = User::load($account->id());
    if (!$user->get('field_profile')->isEmpty() && $node->id() == $user->get('field_profile')->target_id) {
      return new AccessResultAllowed();
    }
    if (($user->hasRole('deputy_admin') || $user->hasRole('administrator')) && $node->id() != 1) {
      return new AccessResultAllowed();
    }
  }
  // Prevent alumni from seeing Profiles.
  if ($node->getType() == 'profile' && $op == 'view') {
    $user = User::load($account->id());
    if (!$user->hasRole('deputy_admin') && $user->hasRole('alumni')) {
      if ($node->id() != $user->get('field_profile')->target_id) {
        return new AccessResultForbidden();
      }
      else {
        return new AccessResultAllowed();
      }
    }
  }
}
function neuronet_misc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_profile_edit_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['revision_information']['#access'] = False;
      $form['field_email']['#access'] = False;
    }
  }
  if ($form_id == 'user_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['field_profile']['#access'] = False;
      unset($form['contact']);
      $form['user_picture']['#access'] = False;
    }
  }
  if ($form_id == 'node_profile_form') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    if ($path_args[2] == 'neuronet'){
      $form['actions']['submit']['#submit'][] = 'neuronet_misc_profile_submit';
      $form['#validate'][] = 'neuronet_misc_profile_validate';
    }
  }
}

/*
 *  Implements hook_mail_alter()
 *
 *  This function stops all emails from being sent from my development environment
 *  I took it from http://www.jaypan.com/tutorial/preventing-emails-being-sent-drupal-7-development-environment
*/
function neuronet_misc_mail_alter(&$message){
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if (!defined('MED_SERVER')) {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
    // Next: Log the mail so it can be debugged if necessary
    $notice = 'The following email was not sent: <pre> <br/>Subject: ' .  $message['subject'] . '<br/>' . implode('', $message['body']) . '</pre>';
    \Drupal::logger('neuronet_misc')->notice($notice);
  }
}

function neuronet_misc_mail($key, &$message, $params) {
  // Set HTML Headers
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  if ($key == 'custom') {
    // Replace first name.
    $subject = $params['subject'];
    $body = $params['body'];
    $subject = preg_replace('/(%%%FIRSTNAME%%%)/i', $params['profile']->get('field_first_name')->value, $subject);
    $body = preg_replace('/(%%%FIRSTNAME%%%)/i', $params['profile']->get('field_first_name')->value, $body);
    // Replace last name.
    $subject = preg_replace('/(%%%LASTNAME%%%)/i', $params['profile']->get('field_last_name')->value, $subject);
    $body = preg_replace('/(%%%LASTNAME%%%)/i', $params['profile']->get('field_last_name')->value, $body);
    // Replace login link.
    if ($params['user']->id() != 1) {
      $login_url = user_pass_reset_url($params['user']);
      $body = preg_replace('/(%%%LOGINLINK%%%)/i', $login_url, $body);
    }
    $message['subject'] = $subject;
    $message['body'][] = $body;
  }
  else {
    $message['subject'] = $params['action_values']['subject'];
    $message['body'][] = $params['action_values']['body'];
  }

}

function neuronet_misc_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user') {
    $user = User::load($entity->id());
    $connection = \Drupal::database();
      $query = $connection->query("SELECT field_profile_target_id FROM {user__field_profile} WHERE entity_id = :entity_id", [':entity_id' => $entity->id()]);
      $result = $query->fetchAll();
    if (!empty($result)) {
      $nid = $result[0]->field_profile_target_id;
      if ($node = \Drupal::entityTypeManager()->getStorage('node')->load($nid)) {
        $new_email = $user->getEmail();
        $node->set('field_email', $new_email);
        $node->save();
      }

      // if email exists:
        // throw new \Exception(t('Fields are not unique!'));
    }

  }
}

function neuronet_misc_profile_submit(array $form, FormStateInterface &$form_state){
    $form_state->setRedirect('neuronet_misc.create_person');
}

function neuronet_misc_profile_validate(array $form, FormStateInterface &$form_state) {
  $email = $form_state->getValue('field_email');
  $email = $email[0]['value'];
  if (user_load_by_mail($email) != FALSE) {
    $form_state->setErrorByName('field_email', t('That email already exists.'));
  }
  $firstname = $form_state->getValue('field_first_name'); $firstname = $firstname[0]['value'];
  $lastname = $form_state->getValue('field_last_name'); $lastname = $lastname[0]['value'];
  if (user_load_by_name($firstname . ' ' . $lastname) != FALSE) {
    $form_state->setErrorByName('field_first_name', t('That combination of first and last names already exists.'));
  }
}

function neuronet_misc_node_insert($node) {
  if ($node->getType() == 'profile') {
    $email = $node->get('field_email')->getString();
    $name = $node->get('field_first_name')->getString() . ' ' . $node->get('field_last_name')->getString();
    $nid = $node->id();
    //Create a User
    $user = User::create();
    //Mandatory settings
    $user->setPassword(user_password());
    $user->enforceIsNew();
    $user->setEmail($email);
    $user->set('field_profile', $nid);
    $user->setUsername($name);//This username must be unique and accept only a-Z,0-9, - _ @ .
    $user->activate();
    if ($node->get('field_alumni')->value) {
      $user->addRole('alumni');
    }
    else {
      $user->addRole('current_student');
    }
    //Set Language
    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
    $user->set('langcode', $language_interface->getId());
    $user->set('preferred_langcode', $language_interface->getId());
    $user->set('preferred_admin_langcode', $language_interface->getId());
    // Save.
    $user->save();
  }
}
/**
 * Implements hook_node_update()
 */
function neuronet_misc_node_update(EntityInterface $node) {
  // Add alumni role to users associated w/ profiles set to alumni.
  // Remove alumni role from users associated w/ profiles not set to alumni.
  if ($node->getType() == 'profile') {
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
      'field_profile' => $node->id(),
    ]);
    if ($user = reset($users)) {
      if ($node->get('field_alumni')->value && !$user->hasRole('alumni')) {
        $user->addRole('alumni');
        $user->removeRole('current_student');
        $user->save();
      }
      elseif (!$node->get('field_alumni')->value && $user->hasRole('alumni')) {
        $user->removeRole('alumni');
        $user->addRole('current_student');
        $user->save();
      }
    }
    // Set completed fields.
    CompletedFields::saveCompletedFields($node);
  }
}

/**
 * Implements hook_user_login().
 */
function neuronet_misc_user_login(AccountInterface $account) {
  // Redirect login to either Current Students view or User page.
  $roles = $account->getRoles();
  if (\Drupal::routeMatch()->getRouteName() != 'user.reset.login') {
    if (in_array('current_student', $roles) || in_array('administrator', $roles)) {
      $response = new RedirectResponse(\Drupal::url('view.current_students.page_1'));
      return $response->send();
    }
    else {
      $response = new RedirectResponse(\Drupal::url('user.page'));
      return $response->send();
    }
  }
}

/**
 * Implements hook_views_data().
 */
function neuronet_misc_views_data() {
  $data = [];
  $data['completed_profile_fields']['table']['group'] = t('Completed Fields');
  $data['completed_profile_fields']['table']['base'] = [
    'field' => 'nid',
    'title' => t('Completed Fields'),
    'access query tag' => 'node_access',
  ];
  $data['completed_profile_fields']['table']['join'] = [
    'node_field_data' => [
      'left_field' => 'nid',
      'field' => 'nid',
    ],
  ];
  $data['completed_profile_fields']['num_completed_fields'] = [
    'title' => t('Number of Completed Fields'),
    'help' => t('The number of node fields that have been completed.'),
    'field' => [
      'id' => 'numeric',
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'argument' => [
      'id' => 'numeric',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];
  return $data;
}

/**
 * Implements hook_js_settings_alter().
 */
function neuronet_misc_js_settings_alter(&$settings, AttachedAssetsInterface $assets) {
  // Add path prefix if the baseUrl is not empty.
  $base_url = \Drupal::requestStack()->getMasterRequest()->getBaseUrl();
  if (!empty($settings['path']) && empty($settings['path']['pathPrefix']) && !empty(ltrim($base_url, '/'))) {
    $settings['path']['pathPrefix'] = ltrim($base_url, '/');
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function neuronet_misc_module_implements_alter(&$implementations, $hook) {
  // Move NeuroNet Misc to the end of the implementation execution order
  // for the 'js_settings_alter' hook.
  if ($hook == 'js_settings_alter') {
    $group = $implementations['neuronet_misc'];
    unset($implementations['neuronet_misc']);
    $implementations['neuronet_misc'] = $group;
  }
}