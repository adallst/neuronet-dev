diff --git a/config/schema/feeds.schema.yml b/config/schema/feeds.schema.yml
index 2800599..7b53841 100644
--- a/config/schema/feeds.schema.yml
+++ b/config/schema/feeds.schema.yml
@@ -32,6 +32,17 @@ feeds.feed_type.*:
     processor_configuration:
       label: 'Processor configuration'
       type: feeds.processor.entity
+    custom_sources:
+      type: sequence
+      sequence:
+        type: mapping
+        mapping:
+          value:
+            type: string
+          label:
+            type: string
+          description:
+            type: string
     mappings:
       type: sequence
       sequence:
diff --git a/src/Entity/FeedType.php b/src/Entity/FeedType.php
index f806522..1ba4059 100644
--- a/src/Entity/FeedType.php
+++ b/src/Entity/FeedType.php
@@ -136,6 +136,13 @@ class FeedType extends ConfigEntityBundleBase implements FeedTypeInterface, Enti
   protected $mappings = [];
 
   /**
+   * The list of custom sources.
+   *
+   * @var array
+   */
+  protected $custom_sources = [];
+
+  /**
    * The list of sources.
    *
    * @var array
@@ -233,7 +240,7 @@ class FeedType extends ConfigEntityBundleBase implements FeedTypeInterface, Enti
       \Drupal::moduleHandler()->alter('feeds_sources', $this->sources, $this);
     }
 
-    return $this->sources;
+    return $this->sources + $this->custom_sources;
   }
 
   /**
@@ -295,6 +302,14 @@ class FeedType extends ConfigEntityBundleBase implements FeedTypeInterface, Enti
   }
 
   /**
+   * @todo
+   */
+  public function addCustomSource($name, array $source) {
+    $this->custom_sources[$name] = $source;
+    return $this;
+  }
+
+  /**
    * {@inheritdoc}
    */
   public function getPlugins() {
diff --git a/src/Feeds/Parser/CsvParser.php b/src/Feeds/Parser/CsvParser.php
index 194d3cf..3cee27f 100644
--- a/src/Feeds/Parser/CsvParser.php
+++ b/src/Feeds/Parser/CsvParser.php
@@ -34,6 +34,14 @@ class CsvParser extends PluginBase implements ParserInterface {
    * {@inheritdoc}
    */
   public function parse(FeedInterface $feed, FetcherResultInterface $fetcher_result, StateInterface $state) {
+    // Get sources.
+    $sources = [];
+    foreach ($feed->getType()->getMappingSources() as $key => $info) {
+      if (!empty($info['value'])) {
+        $sources[$info['value']] = $key;
+      }
+    }
+
     $feed_config = $feed->getConfigurationFor($this);
 
     if (!filesize($fetcher_result->getFilePath())) {
@@ -57,6 +65,10 @@ class CsvParser extends PluginBase implements ParserInterface {
 
       foreach ($row as $delta => $cell) {
         $key = isset($header[$delta]) ? $header[$delta] : $delta;
+        // Pick machine name of source, if one is found.
+        if (isset($sources[$key])) {
+          $key = $sources[$key];
+        }
         $item->set($key, $cell);
       }
 
diff --git a/src/Form/MappingForm.php b/src/Form/MappingForm.php
index 5a87947..b83e659 100644
--- a/src/Form/MappingForm.php
+++ b/src/Form/MappingForm.php
@@ -46,6 +46,7 @@ class MappingForm extends FormBase {
     foreach ($feed_type->getMappingSources() as $key => $info) {
       $this->sourceOptions[$key] = $info['label'];
     }
+    $this->sourceOptions['__new'] = $this->t('New source...');
     $this->sourceOptions = $this->sortOptions($this->sourceOptions);
 
     $target_options = [];
@@ -151,11 +152,41 @@ class MappingForm extends FormBase {
         continue;
       }
       $row['map'][$column] = [
-        '#type' => 'select',
-        '#options' => $this->sourceOptions,
-        '#default_value' => $source,
-        '#empty_option' => $this->t('- Select a source -'),
-        '#attributes' => ['class' => ['feeds-table-select-list']],
+        'select' => [
+          '#type' => 'select',
+          '#options' => $this->sourceOptions,
+          '#default_value' => $source,
+          '#empty_option' => $this->t('- Select a source -'),
+          '#attributes' => ['class' => ['feeds-table-select-list']],
+        ],
+        '__new' => [
+          '#type' => 'container',
+          '#states' => [
+            'visible' => [
+              ':input[name="mappings[' . $delta . '][map][' . $column . '][select]"]' => ['value' => '__new'],
+            ]
+          ],
+          'value' => [
+            '#type' => 'textfield',
+            '#states' => [
+              'visible' => [
+                ':input[name="mappings[' . $delta . '][map][' . $column . '][select]"]' => ['value' => '__new'],
+              ]
+            ],
+          ],
+          'machine_name' => [
+            '#type' => 'machine_name',
+            '#machine_name' => [
+              //'exists' => get_class($this) . '::sourceExists',
+              'source' => ['mappings', $delta, 'map', $column, '__new', 'value'],
+              'standalone' => TRUE,
+              'label' => '',
+            ],
+            '#default_value' => '',
+            '#required' => FALSE,
+            '#disabled' => '',
+          ],
+        ],
       ];
 
       $label = Html::escape($this->targets[$mapping['target']]->getLabel());
@@ -273,7 +304,18 @@ class MappingForm extends FormBase {
 
     $mappings = $this->feedType->getMappings();
     foreach (array_filter((array) $form_state->getValue('mappings', [])) as $delta => $mapping) {
-      $mappings[$delta]['map'] = $mapping['map'];
+      foreach ($mapping['map'] as $column => $value) {
+        if ($value['select'] == '__new') {
+          // Add a new source.
+          $this->feedType->addCustomSource($value['__new']['machine_name'], [
+            'label' => $value['__new']['value'],
+          ] + $value['__new']);
+          $mappings[$delta]['map'][$column] = $value['__new']['machine_name'];
+        }
+        else {
+          $mappings[$delta]['map'][$column] = $value['select'];
+        }
+      }
       if (isset($mapping['unique'])) {
         $mappings[$delta]['unique'] = array_filter($mapping['unique']);
       }